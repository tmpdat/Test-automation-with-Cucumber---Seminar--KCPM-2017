'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _cucumberTagExpressions = require('cucumber-tag-expressions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FEATURE_LINENUM_REGEXP = /^(.*?)((?::[\d]+)+)?$/;
var tagExpressionParser = new _cucumberTagExpressions.TagExpressionParser();

var PickleFilter = function () {
  function PickleFilter(_ref) {
    var featurePaths = _ref.featurePaths,
        names = _ref.names,
        tagExpression = _ref.tagExpression;
    (0, _classCallCheck3.default)(this, PickleFilter);

    this.featureUriToLinesMapping = this.getFeatureUriToLinesMapping(featurePaths || []);
    this.names = names || [];
    if (tagExpression) {
      this.tagExpressionNode = tagExpressionParser.parse(tagExpression || '');
    }
  }

  (0, _createClass3.default)(PickleFilter, [{
    key: 'getFeatureUriToLinesMapping',
    value: function getFeatureUriToLinesMapping(featurePaths) {
      var mapping = {};
      featurePaths.forEach(function (featurePath) {
        var match = FEATURE_LINENUM_REGEXP.exec(featurePath);
        if (match) {
          var uri = match[1];
          var linesExpression = match[2];
          if (linesExpression) {
            if (!mapping[uri]) {
              mapping[uri] = [];
            }
            linesExpression.slice(1).split(':').forEach(function (line) {
              mapping[uri].push(parseInt(line));
            });
          }
        }
      });
      return mapping;
    }
  }, {
    key: 'matches',
    value: function matches(_ref2) {
      var pickle = _ref2.pickle,
          uri = _ref2.uri;

      return this.matchesAnyLine({ pickle: pickle, uri: uri }) && this.matchesAnyName(pickle) && this.matchesAllTagExpressions(pickle);
    }
  }, {
    key: 'matchesAnyLine',
    value: function matchesAnyLine(_ref3) {
      var pickle = _ref3.pickle,
          uri = _ref3.uri;

      var lines = this.featureUriToLinesMapping[uri];
      if (lines) {
        return _lodash2.default.size(_lodash2.default.intersection(lines, _lodash2.default.map(pickle.locations, 'line'))) > 0;
      } else {
        return true;
      }
    }
  }, {
    key: 'matchesAnyName',
    value: function matchesAnyName(pickle) {
      if (this.names.length === 0) {
        return true;
      }
      return _lodash2.default.some(this.names, function (name) {
        return pickle.name.match(name);
      });
    }
  }, {
    key: 'matchesAllTagExpressions',
    value: function matchesAllTagExpressions(pickle) {
      if (!this.tagExpressionNode) {
        return true;
      }
      return this.tagExpressionNode.evaluate(_lodash2.default.map(pickle.tags, 'name'));
    }
  }]);
  return PickleFilter;
}();

exports.default = PickleFilter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9waWNrbGVfZmlsdGVyLmpzIl0sIm5hbWVzIjpbIkZFQVRVUkVfTElORU5VTV9SRUdFWFAiLCJ0YWdFeHByZXNzaW9uUGFyc2VyIiwiUGlja2xlRmlsdGVyIiwiZmVhdHVyZVBhdGhzIiwibmFtZXMiLCJ0YWdFeHByZXNzaW9uIiwiZmVhdHVyZVVyaVRvTGluZXNNYXBwaW5nIiwiZ2V0RmVhdHVyZVVyaVRvTGluZXNNYXBwaW5nIiwidGFnRXhwcmVzc2lvbk5vZGUiLCJwYXJzZSIsIm1hcHBpbmciLCJmb3JFYWNoIiwibWF0Y2giLCJleGVjIiwiZmVhdHVyZVBhdGgiLCJ1cmkiLCJsaW5lc0V4cHJlc3Npb24iLCJzbGljZSIsInNwbGl0IiwibGluZSIsInB1c2giLCJwYXJzZUludCIsInBpY2tsZSIsIm1hdGNoZXNBbnlMaW5lIiwibWF0Y2hlc0FueU5hbWUiLCJtYXRjaGVzQWxsVGFnRXhwcmVzc2lvbnMiLCJsaW5lcyIsInNpemUiLCJpbnRlcnNlY3Rpb24iLCJtYXAiLCJsb2NhdGlvbnMiLCJsZW5ndGgiLCJzb21lIiwibmFtZSIsImV2YWx1YXRlIiwidGFncyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBRUEsSUFBTUEseUJBQXlCLHVCQUEvQjtBQUNBLElBQU1DLHNCQUFzQixpREFBNUI7O0lBRXFCQyxZO0FBQ25CLDhCQUFvRDtBQUFBLFFBQXRDQyxZQUFzQyxRQUF0Q0EsWUFBc0M7QUFBQSxRQUF4QkMsS0FBd0IsUUFBeEJBLEtBQXdCO0FBQUEsUUFBakJDLGFBQWlCLFFBQWpCQSxhQUFpQjtBQUFBOztBQUNsRCxTQUFLQyx3QkFBTCxHQUFnQyxLQUFLQywyQkFBTCxDQUM5QkosZ0JBQWdCLEVBRGMsQ0FBaEM7QUFHQSxTQUFLQyxLQUFMLEdBQWFBLFNBQVMsRUFBdEI7QUFDQSxRQUFJQyxhQUFKLEVBQW1CO0FBQ2pCLFdBQUtHLGlCQUFMLEdBQXlCUCxvQkFBb0JRLEtBQXBCLENBQTBCSixpQkFBaUIsRUFBM0MsQ0FBekI7QUFDRDtBQUNGOzs7O2dEQUUyQkYsWSxFQUFjO0FBQ3hDLFVBQU1PLFVBQVUsRUFBaEI7QUFDQVAsbUJBQWFRLE9BQWIsQ0FBcUIsdUJBQWU7QUFDbEMsWUFBTUMsUUFBUVosdUJBQXVCYSxJQUF2QixDQUE0QkMsV0FBNUIsQ0FBZDtBQUNBLFlBQUlGLEtBQUosRUFBVztBQUNULGNBQU1HLE1BQU1ILE1BQU0sQ0FBTixDQUFaO0FBQ0EsY0FBTUksa0JBQWtCSixNQUFNLENBQU4sQ0FBeEI7QUFDQSxjQUFJSSxlQUFKLEVBQXFCO0FBQ25CLGdCQUFJLENBQUNOLFFBQVFLLEdBQVIsQ0FBTCxFQUFtQjtBQUNqQkwsc0JBQVFLLEdBQVIsSUFBZSxFQUFmO0FBQ0Q7QUFDREMsNEJBQ0dDLEtBREgsQ0FDUyxDQURULEVBRUdDLEtBRkgsQ0FFUyxHQUZULEVBR0dQLE9BSEgsQ0FHVyxVQUFTUSxJQUFULEVBQWU7QUFDdEJULHNCQUFRSyxHQUFSLEVBQWFLLElBQWIsQ0FBa0JDLFNBQVNGLElBQVQsQ0FBbEI7QUFDRCxhQUxIO0FBTUQ7QUFDRjtBQUNGLE9BakJEO0FBa0JBLGFBQU9ULE9BQVA7QUFDRDs7O21DQUV3QjtBQUFBLFVBQWZZLE1BQWUsU0FBZkEsTUFBZTtBQUFBLFVBQVBQLEdBQU8sU0FBUEEsR0FBTzs7QUFDdkIsYUFDRSxLQUFLUSxjQUFMLENBQW9CLEVBQUVELGNBQUYsRUFBVVAsUUFBVixFQUFwQixLQUNBLEtBQUtTLGNBQUwsQ0FBb0JGLE1BQXBCLENBREEsSUFFQSxLQUFLRyx3QkFBTCxDQUE4QkgsTUFBOUIsQ0FIRjtBQUtEOzs7MENBRStCO0FBQUEsVUFBZkEsTUFBZSxTQUFmQSxNQUFlO0FBQUEsVUFBUFAsR0FBTyxTQUFQQSxHQUFPOztBQUM5QixVQUFNVyxRQUFRLEtBQUtwQix3QkFBTCxDQUE4QlMsR0FBOUIsQ0FBZDtBQUNBLFVBQUlXLEtBQUosRUFBVztBQUNULGVBQU8saUJBQUVDLElBQUYsQ0FBTyxpQkFBRUMsWUFBRixDQUFlRixLQUFmLEVBQXNCLGlCQUFFRyxHQUFGLENBQU1QLE9BQU9RLFNBQWIsRUFBd0IsTUFBeEIsQ0FBdEIsQ0FBUCxJQUFpRSxDQUF4RTtBQUNELE9BRkQsTUFFTztBQUNMLGVBQU8sSUFBUDtBQUNEO0FBQ0Y7OzttQ0FFY1IsTSxFQUFRO0FBQ3JCLFVBQUksS0FBS2xCLEtBQUwsQ0FBVzJCLE1BQVgsS0FBc0IsQ0FBMUIsRUFBNkI7QUFDM0IsZUFBTyxJQUFQO0FBQ0Q7QUFDRCxhQUFPLGlCQUFFQyxJQUFGLENBQU8sS0FBSzVCLEtBQVosRUFBbUIsVUFBUzZCLElBQVQsRUFBZTtBQUN2QyxlQUFPWCxPQUFPVyxJQUFQLENBQVlyQixLQUFaLENBQWtCcUIsSUFBbEIsQ0FBUDtBQUNELE9BRk0sQ0FBUDtBQUdEOzs7NkNBRXdCWCxNLEVBQVE7QUFDL0IsVUFBSSxDQUFDLEtBQUtkLGlCQUFWLEVBQTZCO0FBQzNCLGVBQU8sSUFBUDtBQUNEO0FBQ0QsYUFBTyxLQUFLQSxpQkFBTCxDQUF1QjBCLFFBQXZCLENBQWdDLGlCQUFFTCxHQUFGLENBQU1QLE9BQU9hLElBQWIsRUFBbUIsTUFBbkIsQ0FBaEMsQ0FBUDtBQUNEOzs7OztrQkFqRWtCakMsWSIsImZpbGUiOiJwaWNrbGVfZmlsdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IHsgVGFnRXhwcmVzc2lvblBhcnNlciB9IGZyb20gJ2N1Y3VtYmVyLXRhZy1leHByZXNzaW9ucydcblxuY29uc3QgRkVBVFVSRV9MSU5FTlVNX1JFR0VYUCA9IC9eKC4qPykoKD86OltcXGRdKykrKT8kL1xuY29uc3QgdGFnRXhwcmVzc2lvblBhcnNlciA9IG5ldyBUYWdFeHByZXNzaW9uUGFyc2VyKClcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGlja2xlRmlsdGVyIHtcbiAgY29uc3RydWN0b3IoeyBmZWF0dXJlUGF0aHMsIG5hbWVzLCB0YWdFeHByZXNzaW9uIH0pIHtcbiAgICB0aGlzLmZlYXR1cmVVcmlUb0xpbmVzTWFwcGluZyA9IHRoaXMuZ2V0RmVhdHVyZVVyaVRvTGluZXNNYXBwaW5nKFxuICAgICAgZmVhdHVyZVBhdGhzIHx8IFtdXG4gICAgKVxuICAgIHRoaXMubmFtZXMgPSBuYW1lcyB8fCBbXVxuICAgIGlmICh0YWdFeHByZXNzaW9uKSB7XG4gICAgICB0aGlzLnRhZ0V4cHJlc3Npb25Ob2RlID0gdGFnRXhwcmVzc2lvblBhcnNlci5wYXJzZSh0YWdFeHByZXNzaW9uIHx8ICcnKVxuICAgIH1cbiAgfVxuXG4gIGdldEZlYXR1cmVVcmlUb0xpbmVzTWFwcGluZyhmZWF0dXJlUGF0aHMpIHtcbiAgICBjb25zdCBtYXBwaW5nID0ge31cbiAgICBmZWF0dXJlUGF0aHMuZm9yRWFjaChmZWF0dXJlUGF0aCA9PiB7XG4gICAgICBjb25zdCBtYXRjaCA9IEZFQVRVUkVfTElORU5VTV9SRUdFWFAuZXhlYyhmZWF0dXJlUGF0aClcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBjb25zdCB1cmkgPSBtYXRjaFsxXVxuICAgICAgICBjb25zdCBsaW5lc0V4cHJlc3Npb24gPSBtYXRjaFsyXVxuICAgICAgICBpZiAobGluZXNFeHByZXNzaW9uKSB7XG4gICAgICAgICAgaWYgKCFtYXBwaW5nW3VyaV0pIHtcbiAgICAgICAgICAgIG1hcHBpbmdbdXJpXSA9IFtdXG4gICAgICAgICAgfVxuICAgICAgICAgIGxpbmVzRXhwcmVzc2lvblxuICAgICAgICAgICAgLnNsaWNlKDEpXG4gICAgICAgICAgICAuc3BsaXQoJzonKVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgICBtYXBwaW5nW3VyaV0ucHVzaChwYXJzZUludChsaW5lKSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBtYXBwaW5nXG4gIH1cblxuICBtYXRjaGVzKHsgcGlja2xlLCB1cmkgfSkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLm1hdGNoZXNBbnlMaW5lKHsgcGlja2xlLCB1cmkgfSkgJiZcbiAgICAgIHRoaXMubWF0Y2hlc0FueU5hbWUocGlja2xlKSAmJlxuICAgICAgdGhpcy5tYXRjaGVzQWxsVGFnRXhwcmVzc2lvbnMocGlja2xlKVxuICAgIClcbiAgfVxuXG4gIG1hdGNoZXNBbnlMaW5lKHsgcGlja2xlLCB1cmkgfSkge1xuICAgIGNvbnN0IGxpbmVzID0gdGhpcy5mZWF0dXJlVXJpVG9MaW5lc01hcHBpbmdbdXJpXVxuICAgIGlmIChsaW5lcykge1xuICAgICAgcmV0dXJuIF8uc2l6ZShfLmludGVyc2VjdGlvbihsaW5lcywgXy5tYXAocGlja2xlLmxvY2F0aW9ucywgJ2xpbmUnKSkpID4gMFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIG1hdGNoZXNBbnlOYW1lKHBpY2tsZSkge1xuICAgIGlmICh0aGlzLm5hbWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIF8uc29tZSh0aGlzLm5hbWVzLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICByZXR1cm4gcGlja2xlLm5hbWUubWF0Y2gobmFtZSlcbiAgICB9KVxuICB9XG5cbiAgbWF0Y2hlc0FsbFRhZ0V4cHJlc3Npb25zKHBpY2tsZSkge1xuICAgIGlmICghdGhpcy50YWdFeHByZXNzaW9uTm9kZSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudGFnRXhwcmVzc2lvbk5vZGUuZXZhbHVhdGUoXy5tYXAocGlja2xlLnRhZ3MsICduYW1lJykpXG4gIH1cbn1cbiJdfQ==